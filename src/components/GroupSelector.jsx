import { useState, useEffect } from 'react';
import { supabase } from '../lib/supabaseClient';

export default function GroupSelector({ onGroupSelect }) {
  const [buildings, setBuildings] = useState([]);
  const [courses, setCourses] = useState([]);
  const [groups, setGroups] = useState([]);
  const [selectedBuilding, setSelectedBuilding] = useState('');
  const [selectedCourse, setSelectedCourse] = useState('');
  const [selectedGroup, setSelectedGroup] = useState('');
  const [loading, setLoading] = useState({ buildings: false, courses: false, groups: false });
  const [error, setError] = useState('');

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ—Ä–ø—É—Å–∞ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    loadBuildings();
  }, []);

  const loadBuildings = async () => {
    setLoading(prev => ({ ...prev, buildings: true }));
    setError('');
    try {
      console.log('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ—Ä–ø—É—Å–æ–≤...');
      const { data, error } = await supabase
        .from('buildings')
        .select('*')
        .order('name');

      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—Ä–ø—É—Å–æ–≤:', error);
        setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—Ä–ø—É—Å–æ–≤: ' + error.message);
        return;
      }

      console.log('‚úÖ –ö–æ—Ä–ø—É—Å–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', data);
      setBuildings(data || []);
    } catch (error) {
      console.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ—Ä–ø—É—Å–æ–≤:', error);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ—Ä–ø—É—Å–∞');
    } finally {
      setLoading(prev => ({ ...prev, buildings: false }));
    }
  };

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—É—Ä—Å—ã –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–æ—Ä–ø—É—Å–∞
  useEffect(() => {
    if (selectedBuilding) {
      loadCourses(selectedBuilding);
    } else {
      setCourses([]);
      setSelectedCourse('');
      setGroups([]);
      setSelectedGroup('');
      onGroupSelect(null);
    }
  }, [selectedBuilding]);

  const loadCourses = async (buildingId) => {
    setLoading(prev => ({ ...prev, courses: true }));
    setError('');
    try {
      console.log('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –∫—É—Ä—Å–æ–≤ –¥–ª—è –∫–æ—Ä–ø—É—Å–∞:', buildingId);
      const { data, error } = await supabase
        .from('courses')
        .select('*')
        .eq('building_id', buildingId)
        .order('course_number');

      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—É—Ä—Å–æ–≤:', error);
        setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—É—Ä—Å–æ–≤: ' + error.message);
        return;
      }

      console.log('‚úÖ –ö—É—Ä—Å—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', data);
      setCourses(data || []);
      setSelectedCourse('');
      setGroups([]);
      setSelectedGroup('');
      onGroupSelect(null);
    } catch (error) {
      console.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫—É—Ä—Å–æ–≤:', error);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫—É—Ä—Å—ã');
    } finally {
      setLoading(prev => ({ ...prev, courses: false }));
    }
  };

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –≥—Ä—É–ø–ø—ã –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫—É—Ä—Å–∞
  useEffect(() => {
    if (selectedCourse) {
      loadGroups(selectedCourse);
    } else {
      setGroups([]);
      setSelectedGroup('');
      onGroupSelect(null);
    }
  }, [selectedCourse]);

  const loadGroups = async (courseId) => {
    setLoading(prev => ({ ...prev, groups: true }));
    setError('');
    try {
      console.log('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –≥—Ä—É–ø–ø –¥–ª—è –∫—É—Ä—Å–∞:', courseId);
      const { data, error } = await supabase
        .from('student_groups')
        .select('*')
        .eq('course_id', courseId)
        .order('group_number');

      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä—É–ø–ø:', error);
        setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä—É–ø–ø: ' + error.message);
        return;
      }

      console.log('‚úÖ –ì—Ä—É–ø–ø—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', data);
      setGroups(data || []);
      setSelectedGroup('');
      onGroupSelect(null);
    } catch (error) {
      console.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥—Ä—É–ø–ø:', error);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≥—Ä—É–ø–ø—ã');
    } finally {
      setLoading(prev => ({ ...prev, groups: false }));
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã
  const handleGroupSelect = (groupId) => {
    console.log('üéØ –í—ã–±—Ä–∞–Ω–∞ –≥—Ä—É–ø–ø–∞:', groupId);
    setSelectedGroup(groupId);
    onGroupSelect(groupId);
  };

  return (
    <div className="space-y-4">
      {/* –°–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö */}
      {error && (
        <div className="p-3 bg-red-100 border border-red-300 rounded-lg">
          <div className="text-red-700 text-sm">{error}</div>
          <button 
            onClick={loadBuildings}
            className="mt-2 text-red-600 underline text-xs"
          >
            –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
          </button>
        </div>
      )}

      {/* –í—ã–±–æ—Ä –∫–æ—Ä–ø—É—Å–∞ */}
      <div>
        <label className="block text-sm font-medium mb-2">–ö–æ—Ä–ø—É—Å</label>
        <select
          value={selectedBuilding}
          onChange={(e) => setSelectedBuilding(e.target.value)}
          className="w-full p-3 border border-gray-300 rounded-lg bg-white focus:outline-none focus:ring-2 focus:ring-blue-500"
          disabled={loading.buildings}
        >
          <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä–ø—É—Å</option>
          {buildings.map((building) => (
            <option key={building.id} value={building.id}>
              {building.name}
            </option>
          ))}
        </select>
        {loading.buildings && (
          <div className="text-sm text-blue-500 mt-1">–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ—Ä–ø—É—Å–æ–≤...</div>
        )}
      </div>

      {/* –í—ã–±–æ—Ä –∫—É—Ä—Å–∞ */}
      <div>
        <label className="block text-sm font-medium mb-2">–ö—É—Ä—Å</label>
        <select
          value={selectedCourse}
          onChange={(e) => setSelectedCourse(e.target.value)}
          disabled={!selectedBuilding || loading.courses}
          className="w-full p-3 border border-gray-300 rounded-lg bg-white focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:bg-gray-100 disabled:cursor-not-allowed"
        >
          <option value="">{selectedBuilding ? '–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å' : '–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä–ø—É—Å'}</option>
          {courses.map((course) => (
            <option key={course.id} value={course.id}>
              –ö—É—Ä—Å {course.course_number}
            </option>
          ))}
        </select>
        {loading.courses && (
          <div className="text-sm text-blue-500 mt-1">–ó–∞–≥—Ä—É–∑–∫–∞ –∫—É—Ä—Å–æ–≤...</div>
        )}
      </div>

      {/* –í—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã */}
      <div>
        <label className="block text-sm font-medium mb-2">–ì—Ä—É–ø–ø–∞</label>
        <select
          value={selectedGroup}
          onChange={(e) => handleGroupSelect(e.target.value)}
          disabled={!selectedCourse || loading.groups}
          className="w-full p-3 border border-gray-300 rounded-lg bg-white focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:bg-gray-100 disabled:cursor-not-allowed"
        >
          <option value="">{selectedCourse ? '–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É' : '–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å'}</option>
          {groups.map((group) => (
            <option key={group.id} value={group.id}>
              –ì—Ä—É–ø–ø–∞ {group.group_number}
            </option>
          ))}
        </select>
        {loading.groups && (
          <div className="text-sm text-blue-500 mt-1">–ó–∞–≥—Ä—É–∑–∫–∞ –≥—Ä—É–ø–ø...</div>
        )}
      </div>

      {/* –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      <div className="text-xs text-gray-500 p-3 bg-gray-50 rounded-lg border">
        <div className="font-medium mb-1">–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</div>
        <div>–í—ã–±—Ä–∞–Ω–æ: –ö–æ—Ä–ø—É—Å={selectedBuilding || '–Ω–µ—Ç'}, –ö—É—Ä—Å={selectedCourse || '–Ω–µ—Ç'}, –ì—Ä—É–ø–ø–∞={selectedGroup || '–Ω–µ—Ç'}</div>
        <div>–î–æ—Å—Ç—É–ø–Ω–æ: –ö–æ—Ä–ø—É—Å–æ–≤={buildings.length}, –ö—É—Ä—Å–æ–≤={courses.length}, –ì—Ä—É–ø–ø={groups.length}</div>
        <div>–ó–∞–≥—Ä—É–∑–∫–∞: {JSON.stringify(loading)}</div>
        {buildings.length === 0 && !loading.buildings && (
          <div className="text-red-500 mt-1">‚ö†Ô∏è –ö–æ—Ä–ø—É—Å–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ.</div>
        )}
      </div>
    </div>
  );
}