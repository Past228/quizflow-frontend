import { useState, useEffect } from 'react';
import { supabase } from '../lib/supabaseClient';

export default function GroupSelector({ onGroupSelect }) {
  const [buildings, setBuildings] = useState([]);
  const [courses, setCourses] = useState([]);
  const [groups, setGroups] = useState([]);
  const [selectedBuilding, setSelectedBuilding] = useState('');
  const [selectedCourse, setSelectedCourse] = useState('');
  const [selectedGroup, setSelectedGroup] = useState('');
  const [loading, setLoading] = useState({ buildings: false, courses: false, groups: false });
  const [debug, setDebug] = useState('');

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ—Ä–ø—É—Å–∞ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    loadBuildings();
  }, []);

  const loadBuildings = async () => {
    setLoading(prev => ({ ...prev, buildings: true }));
    setDebug('–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ—Ä–ø—É—Å–æ–≤...');
    try {
      const { data, error } = await supabase
        .from('buildings')
        .select('*')
        .order('name');

      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—Ä–ø—É—Å–æ–≤:', error);
        setDebug(`–û—à–∏–±–∫–∞: ${error.message}`);
        return;
      }

      setBuildings(data || []);
      setDebug(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–æ—Ä–ø—É—Å–æ–≤: ${data?.length || 0}`);
    } catch (error) {
      console.error('üí• –û—à–∏–±–∫–∞:', error);
      setDebug(`üí• ${error.message}`);
    } finally {
      setLoading(prev => ({ ...prev, buildings: false }));
    }
  };

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—É—Ä—Å—ã –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–æ—Ä–ø—É—Å–∞
  useEffect(() => {
    if (selectedBuilding) {
      loadCourses(selectedBuilding);
    } else {
      setCourses([]);
      setSelectedCourse('');
      setGroups([]);
      setSelectedGroup('');
      onGroupSelect(null);
    }
  }, [selectedBuilding]);

  const loadCourses = async (buildingId) => {
    setLoading(prev => ({ ...prev, courses: true }));
    setDebug(`–ó–∞–≥—Ä—É–∑–∫–∞ –∫—É—Ä—Å–æ–≤ –¥–ª—è –∫–æ—Ä–ø—É—Å–∞ ${buildingId}...`);
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–æ—Ä–ø—É—Å–∞
      const selectedBuildingObj = buildings.find(b => b.id == buildingId);
      const buildingName = selectedBuildingObj?.name;
      
      console.log('üè¢ –í—ã–±—Ä–∞–Ω –∫–æ—Ä–ø—É—Å:', buildingName);

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∫—É—Ä—Å—ã –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ—Ä–ø—É—Å–∞
      const { data, error } = await supabase
        .from('courses')
        .select('*')
        .eq('building_id', buildingId)
        .order('course_number');

      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—É—Ä—Å–æ–≤:', error);
        setDebug(`–û—à–∏–±–∫–∞ –∫—É—Ä—Å–æ–≤: ${error.message}`);
        return;
      }

      // –§–ò–õ–¨–¢–†–£–ï–ú –ö–£–†–°–´ –ü–û –õ–û–ì–ò–ö–ï:
      let filteredCourses = [];
      
      if (buildingName === '–°–ü-1') {
        // –î–ª—è –°–ü-1 –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ 1 –∫—É—Ä—Å
        filteredCourses = data.filter(course => course.course_number === 1);
        console.log('üìö –î–ª—è –°–ü-1 –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ–ª—å–∫–æ 1 –∫—É—Ä—Å:', filteredCourses);
      } else {
        // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–æ—Ä–ø—É—Å–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º 2, 3, 4 –∫—É—Ä—Å—ã
        filteredCourses = data.filter(course => [2, 3, 4].includes(course.course_number));
        console.log('üìö –î–ª—è –¥—Ä—É–≥–∏—Ö –∫–æ—Ä–ø—É—Å–æ–≤ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫—É—Ä—Å—ã 2,3,4:', filteredCourses);
      }

      setCourses(filteredCourses);
      setSelectedCourse('');
      setGroups([]);
      setSelectedGroup('');
      onGroupSelect(null);
      
      setDebug(`‚úÖ –ö—É—Ä—Å–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ: ${filteredCourses.length}`);
      
    } catch (error) {
      console.error('üí• –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—É—Ä—Å–æ–≤:', error);
      setDebug(`üí• –û—à–∏–±–∫–∞: ${error.message}`);
    } finally {
      setLoading(prev => ({ ...prev, courses: false }));
    }
  };

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –≥—Ä—É–ø–ø—ã –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫—É—Ä—Å–∞
  useEffect(() => {
    if (selectedCourse) {
      loadGroups(selectedCourse);
    } else {
      setGroups([]);
      setSelectedGroup('');
      onGroupSelect(null);
    }
  }, [selectedCourse]);

  const loadGroups = async (courseId) => {
    setLoading(prev => ({ ...prev, groups: true }));
    setDebug(`–ó–∞–≥—Ä—É–∑–∫–∞ –≥—Ä—É–ø–ø –¥–ª—è –∫—É—Ä—Å–∞ ${courseId}...`);
    try {
      const { data, error } = await supabase
        .from('student_groups')
        .select('*')
        .eq('course_id', courseId)
        .order('group_number');

      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä—É–ø–ø:', error);
        setDebug(`–û—à–∏–±–∫–∞ –≥—Ä—É–ø–ø: ${error.message}`);
        return;
      }

      setGroups(data || []);
      setSelectedGroup('');
      onGroupSelect(null);
      setDebug(`‚úÖ –ì—Ä—É–ø–ø –¥–æ—Å—Ç—É–ø–Ω–æ: ${data?.length || 0}`);
    } catch (error) {
      console.error('üí• –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä—É–ø–ø:', error);
      setDebug(`üí• –û—à–∏–±–∫–∞: ${error.message}`);
    } finally {
      setLoading(prev => ({ ...prev, groups: false }));
    }
  };

  const handleGroupSelect = (groupId) => {
    console.log('üéØ –í—ã–±—Ä–∞–Ω–∞ –≥—Ä—É–ø–ø–∞:', groupId);
    setSelectedGroup(groupId);
    onGroupSelect(groupId);
    setDebug(`‚úÖ –ì—Ä—É–ø–ø–∞ –≤—ã–±—Ä–∞–Ω–∞: ${groupId}`);
  };

  const handleReset = () => {
    setSelectedBuilding('');
    setSelectedCourse('');
    setSelectedGroup('');
    setCourses([]);
    setGroups([]);
    setDebug('');
    onGroupSelect(null);
  };

  // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–æ—Ä–ø—É—Å–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const selectedBuildingName = buildings.find(b => b.id == selectedBuilding)?.name || '';

  return (
    <div className="space-y-4">
      <div className="flex justify-between items-center">
        <h3 className="text-lg font-medium">–í—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã</h3>
        <button
          onClick={handleReset}
          className="text-sm text-blue-600 underline hover:text-blue-800"
        >
          –°–±—Ä–æ—Å–∏—Ç—å
        </button>
      </div>

      {/* –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      {debug && (
        <div className="p-3 bg-blue-50 border border-blue-200 rounded-lg">
          <div className="text-sm text-blue-800">
            <div className="font-medium">–°—Ç–∞—Ç—É—Å: {debug}</div>
            {selectedBuildingName && (
              <div>–í—ã–±—Ä–∞–Ω –∫–æ—Ä–ø—É—Å: {selectedBuildingName}</div>
            )}
          </div>
        </div>
      )}

      {/* –í—ã–±–æ—Ä –∫–æ—Ä–ø—É—Å–∞ */}
      <div>
        <label className="block text-sm font-medium mb-2">–ö–æ—Ä–ø—É—Å</label>
        <select
          value={selectedBuilding}
          onChange={(e) => setSelectedBuilding(e.target.value)}
          className="w-full p-3 border border-gray-300 rounded-lg bg-white focus:outline-none focus:ring-2 focus:ring-blue-500"
          disabled={loading.buildings}
        >
          <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä–ø—É—Å</option>
          {buildings.map((building) => (
            <option key={building.id} value={building.id}>
              {building.name}
            </option>
          ))}
        </select>
        {loading.buildings && (
          <div className="text-sm text-blue-500 mt-1 flex items-center">
            <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-blue-500 mr-2"></div>
            –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ—Ä–ø—É—Å–æ–≤...
          </div>
        )}
      </div>

      {/* –í—ã–±–æ—Ä –∫—É—Ä—Å–∞ */}
      <div>
        <label className="block text-sm font-medium mb-2">–ö—É—Ä—Å</label>
        <select
          value={selectedCourse}
          onChange={(e) => setSelectedCourse(e.target.value)}
          disabled={!selectedBuilding || loading.courses}
          className="w-full p-3 border border-gray-300 rounded-lg bg-white focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:bg-gray-100 disabled:cursor-not-allowed"
        >
          <option value="">
            {!selectedBuilding ? '–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä–ø—É—Å' : 
             loading.courses ? '–ó–∞–≥—Ä—É–∑–∫–∞ –∫—É—Ä—Å–æ–≤...' : 
             courses.length === 0 ? '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—Å–æ–≤' : '–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å'}
          </option>
          {courses.map((course) => (
            <option key={course.id} value={course.id}>
              –ö—É—Ä—Å {course.course_number}
            </option>
          ))}
        </select>
        {loading.courses && (
          <div className="text-sm text-blue-500 mt-1 flex items-center">
            <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-blue-500 mr-2"></div>
            –ó–∞–≥—Ä—É–∑–∫–∞ –∫—É—Ä—Å–æ–≤...
          </div>
        )}
        
        {/* –ü–æ–¥—Å–∫–∞–∑–∫–∞ –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—Å–∞—Ö */}
        {selectedBuilding && courses.length > 0 && (
          <div className="text-sm text-gray-600 mt-1">
            {selectedBuildingName === '–°–ü-1' 
              ? '–î–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ 1 –∫—É—Ä—Å' 
              : '–î–æ—Å—Ç—É–ø–Ω—ã –∫—É—Ä—Å—ã: 2, 3, 4'}
          </div>
        )}
      </div>

      {/* –í—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã */}
      <div>
        <label className="block text-sm font-medium mb-2">–ì—Ä—É–ø–ø–∞</label>
        <select
          value={selectedGroup}
          onChange={(e) => handleGroupSelect(e.target.value)}
          disabled={!selectedCourse || loading.groups}
          className="w-full p-3 border border-gray-300 rounded-lg bg-white focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:bg-gray-100 disabled:cursor-not-allowed"
        >
          <option value="">
            {!selectedCourse ? '–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å' : 
             loading.groups ? '–ó–∞–≥—Ä—É–∑–∫–∞ –≥—Ä—É–ø–ø...' : 
             groups.length === 0 ? '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø' : '–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É'}
          </option>
          {groups.map((group) => (
            <option key={group.id} value={group.id}>
              –ì—Ä—É–ø–ø–∞ {group.group_number}
            </option>
          ))}
        </select>
        {loading.groups && (
          <div className="text-sm text-blue-500 mt-1 flex items-center">
            <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-blue-500 mr-2"></div>
            –ó–∞–≥—Ä—É–∑–∫–∞ –≥—Ä—É–ø–ø...
          </div>
        )}
      </div>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±–æ—Ä–µ */}
      {selectedGroup && (
        <div className="p-3 bg-green-50 border border-green-200 rounded-lg">
          <div className="text-green-700 flex items-center">
            <span className="mr-2">‚úÖ</span>
            –ì—Ä—É–ø–ø–∞ –≤—ã–±—Ä–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ! (ID: {selectedGroup})
          </div>
        </div>
      )}
    </div>
  );
}