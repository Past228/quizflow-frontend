import { useState } from 'react';
import { supabase } from '../lib/supabaseClient';
import GroupSelector from './GroupSelector';

export default function Auth() {
  const [loading, setLoading] = useState(false);
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [firstName, setFirstName] = useState('');
  const [lastName, setLastName] = useState('');
  const [selectedGroupId, setSelectedGroupId] = useState(null);
  const [isSignUp, setIsSignUp] = useState(false);
  const [message, setMessage] = useState('');

  const handleAuth = async (e) => {
    e.preventDefault();
    setLoading(true);
    setMessage('');

    try {
      if (isSignUp) {
        if (!selectedGroupId) {
          setMessage('‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–±–Ω—É—é –≥—Ä—É–ø–ø—É');
          setLoading(false);
          return;
        }

        console.log('üöÄ –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø:', { email, firstName, lastName, selectedGroupId });

        // 1. –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –° META DATA
        const { data: authData, error: authError } = await supabase.auth.signUp({
          email,
          password,
          options: {
            data: {
              first_name: firstName,
              last_name: lastName
            }
          }
        });

        if (authError) throw authError;
        if (!authData.user) throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–æ–∑–¥–∞–Ω');

        console.log('‚úÖ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –°–û–ó–î–ê–ù:', authData.user.id);

        // 2. –ñ–î–ï–ú 3 –°–ï–ö–£–ù–î–´ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è —á–µ—Ä–µ–∑ —Ç—Ä–∏–≥–≥–µ—Ä
        console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è...');
        await new Promise(resolve => setTimeout(resolve, 3000));

        // 3. –ü–†–û–í–ï–†–Ø–ï–ú –°–û–ó–î–ê–õ–°–Ø –õ–ò –ü–†–û–§–ò–õ–¨
        const { data: profile, error: profileError } = await supabase
          .from('profiles')
          .select('*')
          .eq('id', authData.user.id)
          .single();

        if (profileError || !profile) {
          console.error('‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');
          throw new Error('–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ —Å–æ–∑–¥–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
        }

        console.log('‚úÖ –ü–†–û–§–ò–õ–¨ –°–û–ó–î–ê–ù:', profile);

        // 4. –û–ë–ù–û–í–õ–Ø–ï–ú –ì–†–£–ü–ü–£
        const { error: updateError } = await supabase
          .from('profiles')
          .update({ group_id: selectedGroupId })
          .eq('id', authData.user.id);

        if (updateError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã:', updateError);
          throw new Error('–ì—Ä—É–ø–ø–∞ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: ' + updateError.message);
        }

        console.log('‚úÖ –ì–†–£–ü–ü–ê –°–û–•–†–ê–ù–ï–ù–ê');
        setMessage('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ email –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.');
        resetForm();

      } else {
        // –í–•–û–î
        console.log('üîë –í–•–û–î:', email);
        const { error } = await supabase.auth.signInWithPassword({ email, password });
        if (error) throw error;
        setMessage('‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω!');
      }
    } catch (error) {
      console.error('üí• –û–®–ò–ë–ö–ê:', error);
      setMessage('‚ùå ' + error.message);
    } finally {
      setLoading(false);
    }
  };

  const resetForm = () => {
    setEmail('');
    setPassword('');
    setFirstName('');
    setLastName('');
    setSelectedGroupId(null);
  };

  return (
    <div className="max-w-md mx-auto mt-8 p-6 border rounded-lg shadow-lg bg-white">
      <h2 className="text-2xl font-bold mb-6 text-center text-gray-800">
        {isSignUp ? '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è' : '–í—Ö–æ–¥'}
      </h2>
      
      {message && (
        <div className={`p-3 rounded mb-4 ${
          message.includes('‚úÖ') ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
        }`}>
          {message}
        </div>
      )}

      <form onSubmit={handleAuth} className="space-y-4">
        <div>
          <label className="block text-sm font-medium mb-1">Email</label>
          <input
            type="email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            className="w-full p-3 border rounded-lg"
            required
          />
        </div>
        
        <div>
          <label className="block text-sm font-medium mb-1">–ü–∞—Ä–æ–ª—å</label>
          <input
            type="password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            className="w-full p-3 border rounded-lg"
            required
            minLength="6"
          />
        </div>

        {isSignUp && (
          <>
            <div>
              <label className="block text-sm font-medium mb-1">–§–∞–º–∏–ª–∏—è</label>
              <input
                type="text"
                value={lastName}
                onChange={(e) => setLastName(e.target.value)}
                className="w-full p-3 border rounded-lg"
                required
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium mb-1">–ò–º—è</label>
              <input
                type="text"
                value={firstName}
                onChange={(e) => setFirstName(e.target.value)}
                className="w-full p-3 border rounded-lg"
                required
              />
            </div>

            <div className="border-t pt-4">
              <h3 className="text-lg font-medium mb-3">–í—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã</h3>
              <GroupSelector onGroupSelect={setSelectedGroupId} />
              
              {selectedGroupId && (
                <div className="mt-3 p-3 bg-green-50 rounded-lg">
                  <span className="text-green-700">‚úÖ –ì—Ä—É–ø–ø–∞ –≤—ã–±—Ä–∞–Ω–∞</span>
                </div>
              )}
            </div>
          </>
        )}

        <button
          type="submit"
          disabled={loading || (isSignUp && !selectedGroupId)}
          className="w-full bg-blue-600 text-white p-3 rounded-lg disabled:bg-gray-400"
        >
          {loading ? '‚è≥' : (isSignUp ? '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è' : '–í–æ–π—Ç–∏')}
        </button>
      </form>

      <div className="mt-4 text-center">
        <button
          onClick={() => {
            setIsSignUp(!isSignUp);
            setMessage('');
            resetForm();
          }}
          className="text-blue-600 underline"
        >
          {isSignUp ? '–í–æ–π—Ç–∏' : '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'}
        </button>
      </div>
    </div>
  );
}