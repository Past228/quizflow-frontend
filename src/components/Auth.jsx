import { useState } from 'react';
import { supabase } from '../lib/supabaseClient';
import GroupSelector from './GroupSelector';

export default function Auth() {
  const [loading, setLoading] = useState(false);
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [firstName, setFirstName] = useState('');
  const [lastName, setLastName] = useState('');
  const [selectedGroupId, setSelectedGroupId] = useState(null);
  const [isSignUp, setIsSignUp] = useState(false);
  const [message, setMessage] = useState('');
  const [errors, setErrors] = useState({});

  const validateForm = () => {
    const newErrors = {};

    if (!email) {
      newErrors.email = 'Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω';
    } else if (!/\S+@\S+\.\S+/.test(email)) {
      newErrors.email = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email';
    }

    if (!password) {
      newErrors.password = '–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω';
    } else if (password.length < 6) {
      newErrors.password = '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤';
    }

    if (isSignUp) {
      if (!firstName) newErrors.firstName = '–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
      if (!lastName) newErrors.lastName = '–§–∞–º–∏–ª–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞';
      if (!selectedGroupId) newErrors.group = '–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–±–Ω—É—é –≥—Ä—É–ø–ø—É';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleAuth = async (e) => {
    e.preventDefault();
    setMessage('');
    setErrors({});

    if (!validateForm()) {
      return;
    }

    setLoading(true);

    try {
      if (isSignUp) {
        console.log('üöÄ –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø:', { 
          email, 
          firstName, 
          lastName, 
          selectedGroupId 
        });

        // 1. –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø
        const { data: authData, error: authError } = await supabase.auth.signUp({
          email,
          password,
          options: {
            data: {
              first_name: firstName,
              last_name: lastName,
              group_id: selectedGroupId
            }
          }
        });

        if (authError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', authError);
          if (authError.message.includes('already registered')) {
            throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
          }
          throw authError;
        }

        if (!authData.user) {
          throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        }

        console.log('‚úÖ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –°–û–ó–î–ê–ù:', authData.user.id);

        // 2. –ñ–î–ï–ú –∏ –ü–†–û–í–ï–†–Ø–ï–ú —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
        console.log('‚è≥ –û–∂–∏–¥–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è...');
        await new Promise(resolve => setTimeout(resolve, 2000));

        // 3. –ü–†–û–í–ï–†–Ø–ï–ú –°–û–ó–î–ê–õ–°–Ø –õ–ò –ü–†–û–§–ò–õ–¨
        const { data: profile, error: profileError } = await supabase
          .from('profiles')
          .select('*')
          .eq('id', authData.user.id)
          .single();

        if (profileError || !profile) {
          console.log('‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');
          throw new Error('–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ —Å–æ–∑–¥–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
        }

        console.log('‚úÖ –ü–†–û–§–ò–õ–¨ –°–û–ó–î–ê–ù:', profile);

        // 4. –ü–†–û–í–ï–†–Ø–ï–ú –°–û–•–†–ê–ù–ò–õ–ê–°–¨ –õ–ò –ì–†–£–ü–ü–ê
        if (profile.group_id !== parseInt(selectedGroupId)) {
          console.log('üîÑ –ì—Ä—É–ø–ø–∞ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞—Å—å, –æ–±–Ω–æ–≤–ª—è–µ–º...');
          
          // –ü—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å –≥—Ä—É–ø–ø—É
          const { error: updateError } = await supabase
            .from('profiles')
            .update({ 
              group_id: selectedGroupId,
              first_name: firstName,
              last_name: lastName 
            })
            .eq('id', authData.user.id);

          if (updateError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', updateError);
            throw new Error('–î–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å: ' + updateError.message);
          }
          
          console.log('‚úÖ –ì–†–£–ü–ü–ê –û–ë–ù–û–í–õ–ï–ù–ê');
        }

        console.log('‚úÖ –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê');
        setMessage('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ email –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.');
        resetForm();

      } else {
        // –í–•–û–î
        console.log('üîë –í–•–û–î:', email);
        const { error } = await supabase.auth.signInWithPassword({ 
          email, 
          password 
        });
        
        if (error) {
          if (error.message.includes('Invalid login credentials')) {
            throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å');
          } else if (error.message.includes('Email not confirmed')) {
            throw new Error('Email –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É');
          }
          throw error;
        }
        
        setMessage('‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω!');
      }
    } catch (error) {
      console.error('üí• –û–®–ò–ë–ö–ê:', error);
      setMessage('‚ùå ' + error.message);
    } finally {
      setLoading(false);
    }
  };

  const resetForm = () => {
    setEmail('');
    setPassword('');
    setFirstName('');
    setLastName('');
    setSelectedGroupId(null);
    setErrors({});
    setMessage('');
  };

  const handleInputChange = (setter) => (e) => {
    setter(e.target.value);
    if (errors[e.target.name]) {
      setErrors(prev => ({ ...prev, [e.target.name]: '' }));
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-8 px-4">
      {/* Header */}
      <div className="max-w-6xl mx-auto mb-12">
        <div className="flex justify-between items-center">
          <div className="flex items-center">
            <h1 className="text-3xl font-bold text-gray-900">QuizFlow</h1>
          </div>
          <div className="flex items-center space-x-4">
            <span className="text-xl font-semibold text-gray-700">–õ–∏–¥–µ—Ä–±–µ—Ä–¥</span>
            {!isSignUp && (
              <button 
                onClick={() => setIsSignUp(true)}
                className="bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 transition-colors"
              >
                –í–æ–π—Ç–∏
              </button>
            )}
          </div>
        </div>
      </div>

      {/* Auth Form */}
      <div className="max-w-md mx-auto p-8 bg-white rounded-2xl shadow-xl border border-gray-200">
        <h2 className="text-3xl font-bold mb-8 text-center text-gray-900">
          {isSignUp ? '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è' : '–í—Ö–æ–¥'}
        </h2>
        
        {message && (
          <div className={`p-4 rounded-lg mb-6 ${
            message.includes('‚úÖ') ? 'bg-green-100 text-green-800 border border-green-300' : 
            'bg-red-100 text-red-800 border border-red-300'
          }`}>
            {message}
          </div>
        )}

        <form onSubmit={handleAuth} className="space-y-6">
          {/* Email & Password Section */}
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-semibold mb-2 text-gray-700">Email:</label>
              <input
                type="email"
                name="email"
                value={email}
                onChange={handleInputChange(setEmail)}
                className={`w-full p-4 border-2 rounded-xl focus:outline-none focus:ring-2 transition-all ${
                  errors.email ? 'border-red-500 focus:ring-red-200' : 'border-gray-300 focus:ring-blue-200 focus:border-blue-500'
                }`}
                placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email"
                required
              />
              {errors.email && (
                <div className="text-red-500 text-sm mt-2 flex items-center">
                  <span className="mr-2">‚ö†Ô∏è</span>
                  {errors.email}
                </div>
              )}
            </div>
            
            <div>
              <label className="block text-sm font-semibold mb-2 text-gray-700">–ü–∞—Ä–æ–ª—å:</label>
              <input
                type="password"
                name="password"
                value={password}
                onChange={handleInputChange(setPassword)}
                className={`w-full p-4 border-2 rounded-xl focus:outline-none focus:ring-2 transition-all ${
                  errors.password ? 'border-red-500 focus:ring-red-200' : 'border-gray-300 focus:ring-blue-200 focus:border-blue-500'
                }`}
                placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å"
                required
                minLength="6"
              />
              {errors.password && (
                <div className="text-red-500 text-sm mt-2 flex items-center">
                  <span className="mr-2">‚ö†Ô∏è</span>
                  {errors.password}
                </div>
              )}
            </div>
          </div>

          {/* Personal Info Section (only for registration) */}
          {isSignUp && (
            <>
              <div className="border-t border-gray-300 pt-6 space-y-4">
                <div>
                  <label className="block text-sm font-semibold mb-2 text-gray-700">–§–∞–º–∏–ª–∏—è:</label>
                  <input
                    type="text"
                    name="lastName"
                    value={lastName}
                    onChange={handleInputChange(setLastName)}
                    className={`w-full p-4 border-2 rounded-xl focus:outline-none focus:ring-2 transition-all ${
                      errors.lastName ? 'border-red-500 focus:ring-red-200' : 'border-gray-300 focus:ring-blue-200 focus:border-blue-500'
                    }`}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é"
                    required
                  />
                  {errors.lastName && (
                    <div className="text-red-500 text-sm mt-2 flex items-center">
                      <span className="mr-2">‚ö†Ô∏è</span>
                      {errors.lastName}
                    </div>
                  )}
                </div>
                
                <div>
                  <label className="block text-sm font-semibold mb-2 text-gray-700">–ò–º—è:</label>
                  <input
                    type="text"
                    name="firstName"
                    value={firstName}
                    onChange={handleInputChange(setFirstName)}
                    className={`w-full p-4 border-2 rounded-xl focus:outline-none focus:ring-2 transition-all ${
                      errors.firstName ? 'border-red-500 focus:ring-red-200' : 'border-gray-300 focus:ring-blue-200 focus:border-blue-500'
                    }`}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è"
                    required
                  />
                  {errors.firstName && (
                    <div className="text-red-500 text-sm mt-2 flex items-center">
                      <span className="mr-2">‚ö†Ô∏è</span>
                      {errors.firstName}
                    </div>
                  )}
                </div>
              </div>

              {/* Group Selection Section */}
              <div className="border-t border-gray-300 pt-6">
                <h3 className="text-lg font-semibold mb-4 text-gray-800">–í—ã–±–æ—Ä —É—á–µ–±–Ω–æ–π –≥—Ä—É–ø–ø—ã</h3>
                <GroupSelector onGroupSelect={setSelectedGroupId} />
                
                {errors.group && (
                  <div className="text-red-500 text-sm mt-3 flex items-center">
                    <span className="mr-2">‚ö†Ô∏è</span>
                    {errors.group}
                  </div>
                )}
                
                {selectedGroupId ? (
                  <div className="mt-4 p-4 bg-green-50 rounded-xl border-2 border-green-300">
                    <span className="text-green-700 font-medium flex items-center">
                      <span className="mr-2">‚úÖ</span>
                      –ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω–∞
                    </span>
                  </div>
                ) : (
                  <div className="mt-4 p-4 bg-yellow-50 rounded-xl border-2 border-yellow-300">
                    <span className="text-yellow-700 flex items-center">
                      <span className="mr-2">‚ö†Ô∏è</span>
                      –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —É—á–µ–±–Ω—É—é –≥—Ä—É–ø–ø—É
                    </span>
                  </div>
                )}
              </div>
            </>
          )}

          {/* Submit Button */}
          <button
            type="submit"
            disabled={loading}
            className="w-full bg-blue-600 text-white p-4 rounded-xl disabled:bg-gray-400 hover:bg-blue-700 transition-colors focus:outline-none focus:ring-4 focus:ring-blue-200 font-semibold text-lg shadow-lg hover:shadow-xl transform hover:-translate-y-0.5 transition-all duration-200"
          >
            {loading ? (
              <div className="flex items-center justify-center">
                <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-white mr-3"></div>
                –û–±—Ä–∞–±–æ—Ç–∫–∞...
              </div>
            ) : (
              isSignUp ? '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è' : '–í–æ–π—Ç–∏'
            )}
          </button>
        </form>

        {/* Toggle between Sign Up and Sign In */}
        <div className="mt-8 text-center border-t border-gray-300 pt-6">
          <button
            onClick={() => {
              setIsSignUp(!isSignUp);
              resetForm();
            }}
            className="text-blue-600 hover:text-blue-800 font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-blue-200 rounded-lg px-4 py-2"
          >
            {isSignUp ? '–£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç? –í–æ–π—Ç–∏' : '–ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞? –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'}
          </button>
        </div>
      </div>
    </div>
  );
}